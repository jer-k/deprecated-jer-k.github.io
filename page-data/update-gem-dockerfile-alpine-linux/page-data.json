{"componentChunkName":"component---src-templates-post-template-js","path":"/update-gem-dockerfile-alpine-linux","result":{"data":{"markdownRemark":{"id":"d5b0e76d-143c-522b-90a3-2b716ab29eba","html":"<p>An update to my post on <a href=\"https://jer-k.github.io/testing-and-developer-scripts-for-active-record-gem/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">adding a testing environment to a gem</a>. After doing some recent updates to our Docker images at work, I realized that we are always using Ruby Alpine images, and not the base Ruby image. I can’t remember why I built the gem’s Dockerfile using the base Ruby image, perhaps I had just overlooked the fact that we used Ruby Alpine, but I wanted to standardize the Dockerfiles I had written at work and here for the blog so I decided to look into what it would take to do so.</p>\n<p>First, why choose an Alpine image? Many other developers have covered this topic in their blog posts and I think it’s best not wander down that path again. Instead we’ll look at a couple interesting snippets and move onto implementation details.</p>\n<p><strong>“Alpine Linux is a very tiny Linux distribution. It’s built on BusyBox, and it includes only the minimum files needed to boot and run the operating system.”</strong></p>\n<p>from Ilija Eftimov’s <a href=\"https://blog.codeship.com/build-minimal-docker-container-ruby-apps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Build a Minimal Docker Container for Ruby Apps</a> blog post, which is a great in-depth overview about going building a Ruby application from scratch with Docker and Alpine Linux.</p>\n<p><strong>“Debian based base images may be easier to start with but it comes with the cost of image size (Image 2). It is almost six times bigger than image based on Alpine Linux.”</strong></p>\n<p>from Lauri Nevala’s <a href=\"https://ghost.kontena.io/dockerizing-ruby-application/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dockerizing Ruby Application</a> blog post, which details the different base images that are available for Ruby and goes through an example of building a Ruby application with Docker and Alpine Linux.</p>\n<p>First let’s look at the updated <a href=\"https://github.com/jer-k/gem_with_database/blob/master/Dockerfile\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dockerfile</a>.</p>\n<deckgo-highlight-code language=\"dockerfile\"  >\n          <code slot=\"code\">FROM ruby:2.5.0-alpine\nWORKDIR /usr/src/app/\n\nRUN apk --update add --no-cache --virtual run-dependencies \\\n  bash \\\n  build-base \\\n  postgresql-client \\\n  postgresql-dev \\\n  git\n\n#Copy the gem files into the WORKDIR\nCOPY gem_with_database.gemspec .\nCOPY Gemfile .\nCOPY lib/gem_with_database/version.rb lib/gem_with_database/\n\nRUN bundle check || bundle install\n\nCOPY . .</code>\n        </deckgo-highlight-code>\n<p>And let’s dive into the changes as seen in the <a href=\"https://github.com/jer-k/gem_with_database/commit/c08c2903310db2acb1bc7e0afda5e69c4e7605ec\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">commit</a> where I made this conversion.</p>\n<p><img src=\"media/gem_with_database_alpine_changes.png\" alt=\"gem_with_database_git_diff\"></p>\n<p>To start I changed the image to <code class=\"language-text\">ruby:2.5.0-alpine</code> to use the Ruby Alpine image. Next, I’m using <a href=\"https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">apk</a> to run <code class=\"language-text\">apk --update add --no-cache --virtual run-dependencies</code>. Let’s break down the flags I passed to this command.</p>\n<p><code class=\"language-text\">--update</code>:\nInterestingly enough the <code class=\"language-text\">--update</code> flag does not seem to be documented anywhere in the Wiki, but I learned about it from a Gliderlabs’ post on <a href=\"http://gliderlabs.viewdocs.io/docker-alpine/usage/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker Alpine Usage</a>. The description they give is <strong>“The —update flag fetches the current package index before adding the package. We don’t ship the image with a package index (since that can go stale fairly quickly).”</strong> It appears to be shorthand for doing <code class=\"language-text\">apk update &amp;&amp; apk add</code>.</p>\n<p><code class=\"language-text\">add</code>:\nThis is pretty straight forward. From the <a href=\"https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management#Add_a_Package\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a>.\n<strong>“Use add to install packages from a repository. Any necessary dependencies are also installed. If you have multiple repositories, the add command installs the newest package.”</strong></p>\n<p><code class=\"language-text\">--no-cache</code>:\nThe <code class=\"language-text\">apk --help</code> description for <code class=\"language-text\">--no-cache</code> is <strong>“—no-cache Do not use any local cache path”</strong>. However, I think the Gliderlabs article did a better job of describing the <a href=\"http://gliderlabs.viewdocs.io/docker-alpine/usage/#user-content-disabling-cache\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">functionality</a>.\n<strong>“It allows users to install packages with an index that is updated and used on-the-fly and not cached locally.”</strong></p>\n<p><code class=\"language-text\">--virtual run-dependencies</code>: The <code class=\"language-text\">apk add --help</code> description for <code class=\"language-text\">--virtual</code> is <strong>“-t, —virtual NAME Instead of adding all the packages to ‘world’, create a new virtual package with the listed dependencies and add that to ‘world’; the actions of the command are easily reverted by deleting the virtual package.”</strong> The Gliderlabs article gives a good example of using <code class=\"language-text\">--virtual</code> to install <a href=\"http://gliderlabs.viewdocs.io/docker-alpine/usage/#user-content-virtual-packages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">build-dependencies</a> which can then be removed after building the image is complete. We’ve named our packages <code class=\"language-text\">run-dependencies</code> because they are needed at runtime and should not be removed.</p>\n<p>Now lets go through the packages that we add</p>\n<deckgo-highlight-code   highlight-lines=\"undefined\">\n          <code slot=\"code\">  bash \\\n  build-base \\\n  postgresql-client \\\n  postgresql-dev \\\n  git</code>\n        </deckgo-highlight-code>\n<p><a href=\"https://pkgs.alpinelinux.org/packages?name=bash&#x26;branch=edge\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bash</a> is added so that we can execute our <a href=\"https://github.com/jer-k/gem_with_database/blob/master/bin/wait_for_pg.sh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wait<em>for</em>pg.sh</a> script when we use the <a href=\"https://github.com/jer-k/gem_with_database/blob/master/docker-compose.yml#L4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">entry_point</a> in our <code class=\"language-text\">docker-compose</code> file. Also we are able to run a shell inside the container via <code class=\"language-text\">docker-compose run app /bin/bash</code>. This is actually a great way to play around with <code class=\"language-text\">apk</code> if you want to try it out!</p>\n<p><a href=\"https://pkgs.alpinelinux.org/packages?name=build-base&#x26;branch=edge\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">build-base</a> adds the applications needed to compile our application for use, like <code class=\"language-text\">make</code> and <code class=\"language-text\">gcc</code>. Below you can see everything that is added.</p>\n<deckgo-highlight-code   highlight-lines=\"undefined\">\n          <code slot=\"code\">/ # apk add --update build-base\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.8/main/x86_64/APKINDEX.tar.gz\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.8/community/x86_64/APKINDEX.tar.gz\n(1/19) Installing binutils (2.30-r5)\n(2/19) Installing libmagic (5.32-r0)\n(3/19) Installing file (5.32-r0)\n(4/19) Installing gmp (6.1.2-r1)\n(5/19) Installing isl (0.18-r0)\n(6/19) Installing libgomp (6.4.0-r8)\n(7/19) Installing libatomic (6.4.0-r8)\n(8/19) Installing pkgconf (1.5.3-r0)\n(9/19) Installing libgcc (6.4.0-r8)\n(10/19) Installing mpfr3 (3.1.5-r1)\n(11/19) Installing mpc1 (1.0.3-r1)\n(12/19) Installing libstdc++ (6.4.0-r8)\n(13/19) Installing gcc (6.4.0-r8)\n(14/19) Installing musl-dev (1.1.19-r10)\n(15/19) Installing libc-dev (0.7.1-r0)\n(16/19) Installing g++ (6.4.0-r8)\n(17/19) Installing make (4.2.1-r2)\n(18/19) Installing fortify-headers (0.9-r0)\n(19/19) Installing build-base (0.5-r1)\nExecuting busybox-1.28.4-r1.trigger\nOK: 165 MiB in 32 packages</code>\n        </deckgo-highlight-code>\n<p><a href=\"https://pkgs.alpinelinux.org/packages?name=postgresql-client&#x26;branch=edge\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">postgresql-client</a> is installed for access to <code class=\"language-text\">psql</code>, which we use in <a href=\"https://github.com/jer-k/gem_with_database/blob/master/bin/wait_for_pg.sh#L9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wait<em>for</em>pg.sh</a> to ensure that the database is ready before we execute the tests.</p>\n<p><a href=\"https://pkgs.alpinelinux.org/packages?name=postgresql-dev&#x26;branch=edge\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">postgresql-dev</a> adds the needed libraries to be able to install the <code class=\"language-text\">pg</code> gem.</p>\n<p><code class=\"language-text\">git</code> is used in the autogenerated portion of the gemspec file for the <a href=\"https://github.com/jer-k/gem_with_database/blob/master/gem_with_database.gemspec#L26-L28\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ls-files</a> command.</p>\n<p>Thats it! Lets run our <code class=\"language-text\">bin/ci.sh</code> script and ensure everything is still working.</p>\n<deckgo-highlight-code   highlight-lines=\"undefined\">\n          <code slot=\"code\">$ bin/ci.sh\ndb uses an image, skipping\nBuilding app\nStep 1/8 : FROM ruby:2.5.0-alpine\n2.5.0-alpine: Pulling from library/ruby\nff3a5c916c92: Pull complete\n8e2da6035957: Pull complete\n41a21a92c054: Pull complete\n05eea10525c0: Pull complete\nDigest: sha256:1d35d83403ab30d3f6d93df194fd830286e0f26d8d26e2748d46f6307c40d7e7\nStatus: Downloaded newer image for ruby:2.5.0-alpine\n ---&gt; 8ea9c590ec75\nStep 2/8 : WORKDIR /usr/src/app/\n ---&gt; Running in 16425d48de04\nRemoving intermediate container 16425d48de04\n ---&gt; 3408f8d0931d\nStep 3/8 : RUN apk --update add --no-cache --virtual run-dependencies   bash   build-base   postgresql-client   postgresql-dev   git\n ---&gt; Running in 60c705e777f1\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.7/main/x86_64/APKINDEX.tar.gz\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.7/main/x86_64/APKINDEX.tar.gz\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.7/community/x86_64/APKINDEX.tar.gz\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.7/community/x86_64/APKINDEX.tar.gz\n(1/32) Installing bash (4.4.19-r1)\nExecuting bash-4.4.19-r1.post-install\n(2/32) Installing binutils-libs (2.30-r1)\n(3/32) Installing binutils (2.30-r1)\n(4/32) Installing gmp (6.1.2-r1)\n(5/32) Installing isl (0.18-r0)\n(6/32) Installing libgomp (6.4.0-r5)\n(7/32) Installing libatomic (6.4.0-r5)\n(8/32) Installing libgcc (6.4.0-r5)\n(9/32) Installing mpfr3 (3.1.5-r1)\n(10/32) Installing mpc1 (1.0.3-r1)\n(11/32) Installing libstdc++ (6.4.0-r5)\n(12/32) Installing gcc (6.4.0-r5)\n(13/32) Installing musl-dev (1.1.18-r3)\n(14/32) Installing libc-dev (0.7.1-r0)\n(15/32) Installing g++ (6.4.0-r5)\n(16/32) Installing make (4.2.1-r0)\n(17/32) Installing fortify-headers (0.9-r0)\n(18/32) Installing build-base (0.5-r0)\n(19/32) Installing libedit (20170329.3.1-r3)\n(20/32) Installing db (5.3.28-r0)\n(21/32) Installing libsasl (2.1.26-r11)\n(22/32) Installing libldap (2.4.45-r3)\n(23/32) Installing libpq (10.5-r0)\n(24/32) Installing postgresql-client (10.5-r0)\n(25/32) Installing postgresql-libs (10.5-r0)\n(26/32) Installing postgresql-dev (10.5-r0)\n(27/32) Installing libssh2 (1.8.0-r2)\n(28/32) Installing libcurl (7.61.1-r0)\n(29/32) Installing expat (2.2.5-r0)\n(30/32) Installing pcre2 (10.30-r0)\n(31/32) Installing git (2.15.2-r0)\n(32/32) Installing run-dependencies (0)\nExecuting busybox-1.27.2-r7.trigger\nOK: 214 MiB in 62 packages\nRemoving intermediate container 60c705e777f1\n ---&gt; f6c061c7c941\nStep 4/8 : COPY gem_with_database.gemspec .\n ---&gt; dcf566413659\nStep 5/8 : COPY Gemfile .\n ---&gt; 7c570a109e4c\nStep 6/8 : COPY lib/gem_with_database/version.rb lib/gem_with_database/\n ---&gt; 7940e94550a3\nStep 7/8 : RUN bundle check || bundle install\n ---&gt; Running in 6b1073edf7cb\nfatal: Not a git repository (or any of the parent directories): .git\nBundler can&#39;t satisfy your Gemfile&#39;s dependencies.\nInstall missing gems with `bundle install`.\nfatal: Not a git repository (or any of the parent directories): .git\nFetching gem metadata from https://rubygems.org/........\nFetching gem metadata from https://rubygems.org/.\nResolving dependencies...\nFetching rake 10.5.0\nInstalling rake 10.5.0\nFetching concurrent-ruby 1.0.5\nInstalling concurrent-ruby 1.0.5\nFetching i18n 0.9.5\nInstalling i18n 0.9.5\nFetching minitest 5.11.3\nInstalling minitest 5.11.3\nFetching thread_safe 0.3.6\nInstalling thread_safe 0.3.6\nFetching tzinfo 1.2.5\nInstalling tzinfo 1.2.5\nFetching activesupport 5.1.5\nInstalling activesupport 5.1.5\nFetching builder 3.2.3\nInstalling builder 3.2.3\nFetching erubi 1.7.1\nInstalling erubi 1.7.1\nFetching mini_portile2 2.3.0\nInstalling mini_portile2 2.3.0\nFetching nokogiri 1.8.4\nInstalling nokogiri 1.8.4 with native extensions\nFetching rails-dom-testing 2.0.3\nInstalling rails-dom-testing 2.0.3\nFetching crass 1.0.4\nInstalling crass 1.0.4\nFetching loofah 2.2.2\nInstalling loofah 2.2.2\nFetching rails-html-sanitizer 1.0.4\nInstalling rails-html-sanitizer 1.0.4\nFetching actionview 5.1.5\nInstalling actionview 5.1.5\nFetching rack 2.0.5\nInstalling rack 2.0.5\nFetching rack-test 1.1.0\nInstalling rack-test 1.1.0\nFetching actionpack 5.1.5\nInstalling actionpack 5.1.5\nFetching activemodel 5.1.5\nInstalling activemodel 5.1.5\nFetching arel 8.0.0\nInstalling arel 8.0.0\nFetching activerecord 5.1.5\nInstalling activerecord 5.1.5\nUsing bundler 1.16.1\nFetching coderay 1.1.2\nInstalling coderay 1.1.2\nFetching diff-lcs 1.3\nInstalling diff-lcs 1.3\nFetching dotenv 2.2.1\nInstalling dotenv 2.2.1\nFetching factory_bot 4.8.2\nInstalling factory_bot 4.8.2\nUsing gem_with_database 0.1.0 from source at `.`\nFetching method_source 0.9.0\nInstalling method_source 0.9.0\nFetching pg 0.21.0\nInstalling pg 0.21.0 with native extensions\nFetching pry 0.11.3\nInstalling pry 0.11.3\nFetching thor 0.20.0\nInstalling thor 0.20.0\nFetching railties 5.1.5\nInstalling railties 5.1.5\nFetching rspec-support 3.7.0\nInstalling rspec-support 3.7.0\nFetching rspec-core 3.7.0\nInstalling rspec-core 3.7.0\nFetching rspec-expectations 3.7.0\nInstalling rspec-expectations 3.7.0\nFetching rspec-mocks 3.7.0\nInstalling rspec-mocks 3.7.0\nFetching rspec 3.7.0\nInstalling rspec 3.7.0\nBundle complete! 12 Gemfile dependencies, 38 gems now installed.\nBundled gems are installed into `/usr/local/bundle`\nRemoving intermediate container 6b1073edf7cb\n ---&gt; e745d22f5fd0\nStep 8/8 : COPY . .\n ---&gt; 47a95a0fcb2e\nSuccessfully built 47a95a0fcb2e\nSuccessfully tagged gem_with_database_app:latest\nStarting gem_with_database_db_1 ... done\n                                       List of databases\n          Name          |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges\n------------------------+----------+----------+------------+------------+-----------------------\n gem_with_database_test | postgres | UTF8     | en_US.utf8 | en_US.utf8 |\n postgres               | postgres | UTF8     | en_US.utf8 | en_US.utf8 |\n template0              | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +\n                        |          |          |            |            | postgres=CTc/postgres\n template1              | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +\n                        |          |          |            |            | postgres=CTc/postgres\n(4 rows)\n\nPostgres is up - executing command\n/usr/local/bin/ruby -I/usr/local/bundle/gems/rspec-core-3.7.0/lib:/usr/local/bundle/gems/rspec-support-3.7.0/lib /usr/local/bundle/gems/rspec-core-3.7.0/exe/rspec --pattern spec/\\*\\*\\{,/\\*/\\*\\*\\}/\\*_spec.rb\nDropped database &#39;gem_with_database_test&#39;\nCreated database &#39;gem_with_database_test&#39;\n-- enable_extension(&quot;plpgsql&quot;)\n   -&gt; 0.0184s\n-- create_table(&quot;authors&quot;, {:force=&gt;:cascade})\n   -&gt; 0.0271s\n-- create_table(&quot;books&quot;, {:force=&gt;:cascade})\n   -&gt; 0.0114s\n-- add_foreign_key(&quot;books&quot;, &quot;authors&quot;)\n   -&gt; 0.0041s\n\nGemWithDatabase\n  has a version number\n\nGemWithDatabase::Author\n  is a test author\n\nFinished in 0.02154 seconds (files took 1.27 seconds to load)\n2 examples, 0 failures</code>\n        </deckgo-highlight-code>\n<p>A final note: Gliderlabs maintain the <a href=\"https://github.com/gliderlabs/docker-alpine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker Alpine image</a> on Github if you’re interested in looking the source code!</p>","fields":{"slug":"update-gem-dockerfile-alpine-linux","tagSlugs":["/tag/ruby/","/tag/rails/","/tag/ruby-gems/","/tag/ruby-on-rails/","/tag/postgres/","/tag/postgresql/","/tag/database/","/tag/docker/","/tag/alpine-linux/"]},"excerpt":"<p>An update to my post on <a href=\"https://jer-k.github.io/testing-and-developer-scripts-for-active-record-gem/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">adding a testing environment to a gem</a>. After doing some recent updates to our Docker images at work, I realized that…</p>","frontmatter":{"date":"2018-09-19","description":"I realized that we are always using Ruby Alpine images, and not the base Ruby image. I wanted to standardize the Dockerfiles I had written at work and here for the blog so I decided to look into what it would take to do so.","tags":["ruby","rails","ruby-gems","ruby-on-rails","postgres","postgresql","database","docker","alpine-linux"],"title":"Update - Ruby Gem Dockerfile with Alpine Linux"}}},"pageContext":{"slug":"update-gem-dockerfile-alpine-linux"}},"staticQueryHashes":["251939775","2920561799","401334301"]}