{"componentChunkName":"component---src-templates-post-template-js","path":"/docker-postgres-image-with-seeded-data","result":{"data":{"markdownRemark":{"id":"c438a65f-4a76-5879-9772-6e8d7a34440c","html":"<p>Recently, I decided that one of my goals for 2019 was to familiarize myself more with Docker. I’ve been exposed to using Docker for the past couple of years, but I don’t use it on a day to day basis. Every once in a while, I would need to update a Dockerfile or a script and I would realize I needed to brush up on mostly everything because it had been so long since the last time I looked at anything Docker related. I decided I would just dive in and read a book to familiarize myself with any concepts I had glossed over before so I started reading <a href=\"https://www.amazon.com/Learn-Docker-Fundamentals-containerizing-applications/dp/1788997026\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Learn Docker – Fundamentals of Docker 18.x</a>. It was during a tutorial where some seeded data was needed in a Postgresql database that I was had a bit of an aha moment. I can build images that have data in them already?!’ I thought to myself; this could actually really help out on local development if I had a copy of a production database. </p>\n<p>I thought I would put together a quick little tutorial on how you can create a Postgresql Docker image with seeded data that anyone could use.</p>\n<p>To start off, I created a new Rails application and generated a migration that created 100 users. You can find the code for that application <a href=\"https://github.com/jer-k/postgres_docker_image_with_data/tree/master/postgres_data\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> (if you want to follow along using that database, simply replace instances of <code class=\"language-text\">my_database_name</code> in this article with <code class=\"language-text\">postgres_data_development</code>). Once the users are in the database, <a href=\"https://www.postgresql.org/docs/10/app-pgdump.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pg_dump</a> can be used to create the file needed to seed the database in our image.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ pg_dump my_database_name -O -x &gt; my_database_name.sql</code>\n        </deckgo-highlight-code>\n<p>The <code class=\"language-text\">-O -x</code> flags tell <code class=\"language-text\">pg_dump</code> to have no owner and no privileges so that the data can be imported into a new database without worrying about user accounts. You can see the generated <code class=\"language-text\">.sql</code> file from my example project <a href=\"https://github.com/jer-k/postgres_docker_image_with_data/blob/master/pg_data.sql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<p>Generating a <code class=\"language-text\">.sql</code> file will work, but imagine a database much larger than the 100 users I created. A good alternative would be to use <a href=\"https://www.gnu.org/software/gzip/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gzip</a> to compress the file and reduce the Docker image size.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ pg_dump my_database_name -O -x | gzip -9 &gt; my_database_name.sql.gz</code>\n        </deckgo-highlight-code>\n<p>With the compressed database, it’s time to start building the Dockerfile.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">FROM postgres:10.6-alpine\nCOPY database_name.sql.gz /docker-entrypoint-initdb.d/\nENV POSTGRES_USER=postgres\nENV POSTGRES_PASSWORD=password\nENV POSTGRES_DB=my_database_name</code>\n        </deckgo-highlight-code>\n<p>That’s it! As of writing the latest version of <a href=\"https://hub.docker.com/_/postgres\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">postgres</a> 10 is <code class=\"language-text\">10.6-alpine</code>. Simply <code class=\"language-text\">COPY</code> the compressed database into the <code class=\"language-text\">docker-entrypoint-initdb.d</code> directory and then the Postgresql base image understands to unzip and initialize the database with the dump file. The only other thing needed is to set the environment variables so that there is a user to access the database with.</p>\n<p>Build the image using the <code class=\"language-text\">-t</code> flag to name it so that it can be referenced it when running a container.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ docker image build -t my_database_image .</code>\n        </deckgo-highlight-code>\n<p>Now run the image using the <code class=\"language-text\">-d</code> flag to run it in detached mode. The last argument <code class=\"language-text\">postgres</code> is the command to start the database.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ docker run -d --name my_running_database --rm my_database_image postgres</code>\n        </deckgo-highlight-code>\n<p>To ensure everything worked properly, there should be 100 users in the database when queried.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ docker exec my_running_database psql -U postgres my_database_name -c “select count(*) from users;”\ncount \n-------\n   100\n(1 row)</code>\n        </deckgo-highlight-code>\n<p>Success! We created a Docker image with seeded data that anyone could use. Also, don’t forget to stop the container that was started earlier!</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ docker stop my_running_database</code>\n        </deckgo-highlight-code>","fields":{"slug":"docker-postgres-image-with-seeded-data","tagSlugs":["/tag/postgres/","/tag/postgresql/","/tag/database/","/tag/docker/","/tag/alpine-linux/","/tag/data/","/tag/seeded-data/"]},"excerpt":"<p>Recently, I decided that one of my goals for 2019 was to familiarize myself more with Docker. I’ve been exposed to using Docker for the past…</p>","frontmatter":{"date":"2019-03-11","description":"Recently, I decided that one of my goals for 2019 was to familiarize myself more with Docker. I've been exposed to using Docker for the past couple of years, but I don't use it on a day to day basis.","tags":["postgres","postgresql","database","docker","alpine-linux","data","seeded-data"],"title":"Postgresql Docker Image with Seeded Data"}}},"pageContext":{"slug":"docker-postgres-image-with-seeded-data"}},"staticQueryHashes":["251939775","2920561799","401334301"]}