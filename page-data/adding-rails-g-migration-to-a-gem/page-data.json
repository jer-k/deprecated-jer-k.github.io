{"componentChunkName":"component---src-templates-post-template-js","path":"/adding-rails-g-migration-to-a-gem","result":{"data":{"markdownRemark":{"id":"efadda57-36f8-5d48-b342-89fe8ea6a500","html":"<p>This is a follow up to my last post about <a href=\"https://jer-k.github.io/add-active-record-rake-tasks-to-gem/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Adding ActiveRecord Rake Tasks to a Gem</a> that I promised to write. In that post I had to figure out how to make the command <code class=\"language-text\">rails g migration</code> accessible inside of the gem, which ended up taking me all afternoon, but surprised me in how little code was actually needed to achieve the result. I wanted to write about the process I went through to figure out what was needed; I believe it is good exercise in understanding how to follow code to and understanding what it takes to re-implement functionality.</p>\n<p>A note before I begin: I use <a href=\"https://www.jetbrains.com/ruby/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RubyMine</a> for my IDE and all of the tracing of the code I did in RubyMine, unless otherwise stated. I’m going to provide links to Github so you can see exactly where I saw the code I’m talking about. I also picked the most current commit as of writing for the links to ensure they continue pointing at the correct code.</p>\n<p>When I first realized that <code class=\"language-text\">rails g migration</code> wasn’t available in the gem I thought to myself, well that makes a lot of sense, I haven’t included Rails. But I was almost fooled by the globally installed Rails for a moment!</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ rails\nUsage:\n  rails new APP_PATH [options]</code>\n        </deckgo-highlight-code>\n<p>That output is indicating that I have installed Rails globally and I can create a new Rails application in any directory I want. The output that I was looking for is the output when running <code class=\"language-text\">rails</code> inside of a Rails application.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ rails\nThe most common rails commands are:\n generate     Generate new code (short-cut alias: &quot;g&quot;)\n console      Start the Rails console (short-cut alias: &quot;c&quot;)\n server       Start the Rails server (short-cut alias: &quot;s&quot;)\n test         Run tests except system tests (short-cut alias: &quot;t&quot;)\n test:system  Run system tests\n dbconsole    Start a console for the database specified in config/database.yml\n              (short-cut alias: &quot;db&quot;)\n\n new          Create a new Rails application. &quot;rails new my_app&quot; creates a\n              new application called MyApp in &quot;./my_app&quot;\n\n\nAll commands can be run with -h (or --help) for more information.</code>\n        </deckgo-highlight-code>\n<p>Seeing this result, the easiest thing that came to mind was to figure out where the line <code class=\"language-text\">The most common rails commands are</code> lives and start my work there. Going to the <a href=\"https://github.com/rails/rails\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rails</a> repo on Github and <a href=\"https://github.com/rails/rails/search?utf8=%E2%9C%93&#x26;q=The+most+common+rails+commands+are&#x26;type=\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">searching</a>, I saw that the second result was a <a href=\"https://github.com/rails/rails/blob/ae3e241b573b450fd9ce694a458ad942a8bd6b03/railties/lib/rails/commands/help/USAGE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">USAGE</a> file in <a href=\"https://github.com/rails/rails/tree/master/railties\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Railties</a> and it was exactly what I was looking for. Now I needed to understand how this <code class=\"language-text\">USAGE</code> file gets invoked.</p>\n<p>I immediately added <code class=\"language-text\">spec.add_development_dependency 'railties', '~> 5'</code> to my gem and opened up directory containing the <code class=\"language-text\">USAGE</code> file. In the same directory is <a href=\"https://github.com/rails/rails/blob/ae3e241b573b450fd9ce694a458ad942a8bd6b03/railties/lib/rails/commands/help/help_command.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">help_command.rb</a>.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">module Rails\n  module Command\n    class HelpCommand &lt; Base # :nodoc:</code>\n        </deckgo-highlight-code>\n<p>Seeing that <code class=\"language-text\">HelpCommand</code> is a subclass of <a href=\"https://github.com/rails/rails/blob/ae3e241b573b450fd9ce694a458ad942a8bd6b03/railties/lib/rails/command/base.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rails::Command::Base</a> I jumped to defintion of <code class=\"language-text\">Base</code> because I’m trying to generate files, not output help information. </p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">require &quot;rails/command/actions&quot;\n\nmodule Rails\n  module Command\n    class Base &lt; Thor</code>\n        </deckgo-highlight-code>\n<p>Looking at <code class=\"language-text\">Rails::Command::Base</code> one of the first things I noticed that it has <a href=\"https://github.com/rails/rails/blob/ae3e241b573b450fd9ce694a458ad942a8bd6b03/railties/lib/rails/command/base.rb#L9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">require “rails/command/actions”</a> right above the class definition. I assumed that <a href=\"https://github.com/rails/rails/blob/ae3e241b573b450fd9ce694a458ad942a8bd6b03/railties/lib/rails/command/actions.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actions.rb</a> likely had more information about the available actions that could be invoked.\nLooking into <code class=\"language-text\">Rails::Command::Actions</code> I was pleasantly surprised to see a method definition for <a href=\"https://github.com/rails/rails/blob/ae3e241b573b450fd9ce694a458ad942a8bd6b03/railties/lib/rails/command/actions.rb#L38-L40\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">load_generators</a> and I knew I was on the right track.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">def load_generators\n  Rails.application.load_generators\nend</code>\n        </deckgo-highlight-code>\n<p>I jumped to the definition of <a href=\"https://github.com/rails/rails/blob/ae3e241b573b450fd9ce694a458ad942a8bd6b03/railties/lib/rails.rb#L39-L41\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rails.application</a> but unfortunately that didn’t inform me about what <code class=\"language-text\">application</code> was supposed to be. I went back and decided that I needed to figure out where <code class=\"language-text\">load_generators</code> was being defined. RubyMine does a great job (sometimes too good when the method definition name is very generic) of finding all the possible places that a method is defined. If it is only defined in a single location, it will jump to directly to that definition, but if there are multiple, it will give you a list of all the locations. For <code class=\"language-text\">load_generators</code> there were only three definition locations, two happened to be in <code class=\"language-text\">Rails::Command::Actions</code> and the other was in <a href=\"https://github.com/rails/rails/blob/ae3e241b573b450fd9ce694a458ad942a8bd6b03/railties/lib/rails/engine.rb#L465-L470\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rails::Engine</a>.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">def load_generators(app = self)\n  require &quot;rails/generators&quot;\n  run_generators_blocks(app)\n  Rails::Generators.configure!(app.config.generators)\n  self\nend</code>\n        </deckgo-highlight-code>\n<p>Now I knew that the <code class=\"language-text\">Rails.application</code> needed to be my own <code class=\"language-text\">Rails::Engine</code>. I hadn’t even written an <code class=\"language-text\">Engine</code> before, but thankfully the Rails team has done a great job adding documentation about writing your own inside of the file! As I started looking through the documentation I came across the portion about <a href=\"https://github.com/rails/rails/blob/ae3e241b573b450fd9ce694a458ad942a8bd6b03/railties/lib/rails/engine.rb#L52-L62\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Generators</a></p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\"># == Generators\n#\n# You can set up generators for engines with &lt;tt&gt;config.generators&lt;/tt&gt; method:\n#\n#   class MyEngine &lt; Rails::Engine\n#     config.generators do |g|\n#       g.orm             :active_record\n#       g.template_engine :erb\n#       g.test_framework  :test_unit\n#     end\n#   end</code>\n        </deckgo-highlight-code>\n<p>This looked exactly what I needed so quickly created my own and attempted to generate a migration.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">module GemWithDatabase\n  class Engine &lt; Rails::Engine\n    config.generators do |g|\n      g.orm :active_record\n    end\n  end\nend</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ exe/gem_rails g migration create_user name:string age:integer\n      invoke  active_record\n      create    db/migrate/20180226042736_create_user.rb</code>\n        </deckgo-highlight-code>\n<p>Success, I was able to use <code class=\"language-text\">rails g</code> and generate my migration! The only caveat was that I had to name the file <code class=\"language-text\">gem_rails</code> because once I installed the gem into an actual <code class=\"language-text\">Rails</code> application, things started to not play nicely together.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">class CreateUser &lt; ActiveRecord::Migration[5.1]\n  def change\n    create_table :users do |t|\n      t.string :name\n      t.integer :age\n    end\n  end\nend</code>\n        </deckgo-highlight-code>\n<p>My main takeaways from this experience were the importance of writing code in a manner that allows another user to come into the code understand the possibilities.  In my opinion, someone should either understand exactly what the code is supposed to do, say a succinct method for example, or they should be able to follow the code to different methods or classes through well-defined and named APIs. Oh, and don’t forget about update to date comments and documentation in the code too! While it was easy to write those sentences, writing code that follows those principles isn’t always so easy. The Rails team (and I mean all contributors!) should be applauded for making life so easy for the rest of us.</p>","fields":{"slug":"adding-rails-g-migration-to-a-gem","tagSlugs":["/tag/ruby/","/tag/rails/","/tag/ruby-gems/","/tag/ruby-on-rails/","/tag/postgres/","/tag/postgresql/","/tag/database/","/tag/active-record/","/tag/rake/"]},"excerpt":"<p>This is a follow up to my last post about <a href=\"https://jer-k.github.io/add-active-record-rake-tasks-to-gem/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Adding ActiveRecord Rake Tasks to a Gem</a> that I promised to write. In that post I had to figure out…</p>","frontmatter":{"date":"2018-02-25","description":"The process I went through to figure out what was needed; I believe it is good exercise in understanding how to follow code to and understanding what it takes to re-implement functionality.","tags":["ruby","rails","ruby-gems","ruby-on-rails","postgres","postgresql","database","active-record","rake"],"title":"Adding Rails G Migration To a Gem - Following Code To Re-Implement Functionality"}}},"pageContext":{"slug":"adding-rails-g-migration-to-a-gem"}},"staticQueryHashes":["251939775","2920561799","401334301"]}