{"componentChunkName":"component---src-templates-post-template-js","path":"/github-action-rspec-simplecov","result":{"data":{"markdownRemark":{"id":"147908bc-8ec3-578d-b9cb-2440560d1408","html":"<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Check now ðŸ˜Ž</p>&mdash; Nat Friedman (@natfriedman) <a href=\"https://twitter.com/natfriedman/status/1162823584684732416?ref_src=twsrc%5Etfw\">August 17, 2019</a></blockquote>\n<p>What a wonderful day that was! Iâ€™ve been playing around with Actions ever since and one of my new projects, a Ruby Gem, didnâ€™t have any form of CI as of this morning. I set out to create an Action that would run the tests for the gem and produce coverage results via <a href=\"https://github.com/colszowka/simplecov\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SimpleCov</a>. While itâ€™s nothing too extravagant, there was a small nuance that I had to resolve and I decided I wanted to share that info.</p>\n<p>Letâ€™s start off with some changes to the <code class=\"language-text\">SimpleCov</code> configuration.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">if ENV.fetch(&#39;COVERAGE&#39;, false)\n  SimpleCov.start do\n    minimum_coverage 90\n    maximum_coverage_drop 2\n  end\nend</code>\n        </deckgo-highlight-code>\n<p>This ensures that the coverage is above 90% and any changes in the future must not drop the coverage by more than 2%. The Gem, in its infancy, does not pass this requirement. Due to that failure, I had to figure out why the Action was not uploading the coverage results. Remember to put the <code class=\"language-text\">SimpleCov</code> code at the very top of <code class=\"language-text\">spec_helper.rb</code>, before you do <code class=\"language-text\">require 'your_gem'</code> to ensure it knows what files to track.</p>\n<p>Now letâ€™s look at the Action, which is based off the default <a href=\"https://github.com/actions/starter-workflows/blob/master/ci/ruby.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ruby Action</a> supplied by Github.</p>\n<deckgo-highlight-code language=\"yaml\"  >\n          <code slot=\"code\">name: RSpec with SimpleCov for a Gem\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v1\n      - name: Set up Ruby 2.6\n        uses: actions/setup-ruby@v1\n        with:\n          ruby-version: 2.6.x\n      - name: Build and test with Rake\n        run: |\n          gem install bundler -v &#39;1.17.3&#39;\n          bundle install --jobs 4 --retry 3\n          COVERAGE=true bundle exec rspec\n      - name: Upload coverage results\n        uses: actions/upload-artifact@master\n        if: always()\n        with:\n          name: coverage-report\n          path: coverage</code>\n        </deckgo-highlight-code>\n<p>The only additions are the last step.</p>\n<deckgo-highlight-code language=\"yaml\"  >\n          <code slot=\"code\">- name: Upload coverage results\n  uses: actions/upload-artifact@master\n  if: always()\n  with:\n    name: coverage-report\n    path: coverage</code>\n        </deckgo-highlight-code>\n<p>It uses the <a href=\"https://github.com/actions/upload-artifact\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">upload-artifact Action</a> created by Github to upload the <code class=\"language-text\">coverage/</code> folder generated by <code class=\"language-text\">SimpleCov</code>. At first, I could not figure out why the artifact was never being uploaded, but I realized that the step was never being run. We can see this in the Actions UI.</p>\n<p><img src=\"media/action_no_artifact.png\" alt=\"action no artifact\"></p>\n<p>The key to making this work is the <code class=\"language-text\">if: always()</code> clause. Looking at the documentation for <a href=\"https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions#always\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Contexts and Expression Syntax</a>, <code class=\"language-text\">always()</code> is described as <code class=\"language-text\">Forces a conditional to evaluate as true, even when canceled.</code> Since <code class=\"language-text\">SimpleCov</code> is failing the <code class=\"language-text\">Build and test with Rake</code> step, we have to force the <code class=\"language-text\">Upload coverage results</code> step to always run. After adding in the if clause, we can see a successful upload in the Actions UI.</p>\n<p><img src=\"media/action_with_artifact.png\" alt=\"action with artifact\"></p>\n<p>Next we scroll to the top of the page and download the artifact, which is a zip file of the <code class=\"language-text\">coverage/</code> folder.</p>\n<p><img src=\"media/download_artifact.png\" alt=\"download artifact\"></p>\n<p>Inside the folder we can open the generated <code class=\"language-text\">index.html</code> to see which files we didnâ€™t have coverage for.</p>\n<p><img src=\"media/coverage_report.png\" alt=\"coverage report\"></p>\n<p>Now we can successfully check the coverage report on our gem and see where the tests are lacking. Hopefully your gem has better coverage than mine!</p>\n<p>You can find the file in my <a href=\"https://github.com/jer-k/actions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actions</a> repository, or directly <a href=\"https://github.com/jer-k/actions/blob/master/rspec-with-simplecov-for-gem.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></p>","fields":{"slug":"github-action-rspec-simplecov","tagSlugs":["/tag/github/","/tag/actions/","/tag/ruby/","/tag/gem/","/tag/rspec/","/tag/simplecov/"]},"excerpt":"<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Check now ðŸ˜Ž</p>&mdash; Nat Friedman (@natfriedman) <a href=\"https://twitter.com/natfriedman/status/1162823584684732416?ref_src=twsrc%5Etfw\">August 17, 2019</a></blockquote>\n<p>What a wonderful day that was! Iâ€™ve been playing around with Actions ever since and one of my new projects, a Ruby Gem, didnâ€™t have anyâ€¦</p>","frontmatter":{"date":"2019-10-16","description":"I've been playing around with Actions ever since and one of my new projects, a Ruby Gem, didn't have any form of CI as of this morning. I set out to create an Action that would run the tests for the gem and produce coverage results via SimpleCov.","tags":["github","actions","ruby","gem","rspec","simplecov"],"title":"Github Action to upload SimpleCov Coverage Results"}}},"pageContext":{"slug":"github-action-rspec-simplecov"}},"staticQueryHashes":["251939775","2920561799","401334301"]}