{"componentChunkName":"component---src-templates-post-template-js","path":"/add-active-record-rake-tasks-to-gem","result":{"data":{"markdownRemark":{"id":"197f980c-5e5d-5c88-88d5-ea673682c64f","html":"<p>In my previous <a href=\"https://jer-k.github.io/connect-to-database-through-gem/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">post</a> I walked through using a gem to connect to another Rails application’s database, but another use case for connecting a gem to a database is for the development of the gem itself. Instead of having to create a Rails application and install the gem to connect to the database to test your models, we can create local database for only the gem by adding ActiveRecord’s Rake tasks.</p>\n<p>There will be a lot to go through so I’m going to break this down into two parts: the first being creating the gem and enabling the usage of familiar tasks such as <code class=\"language-text\">db:create</code> and <code class=\"language-text\">db:migrate</code>, the second being setting up the testing environment locally and with Docker for CI purposes.</p>\n<p>Let’s get started creating the gem!</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">bundler gem gem_with_data</code>\n        </deckgo-highlight-code>\n<p>First thing we need to do is add the dependencies to <code class=\"language-text\">gem_with_data.gemspec</code>.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">spec.add_dependency &#39;activerecord&#39;, &#39;~&gt; 5&#39;\n\nspec.add_development_dependency &quot;bundler&quot;, &quot;~&gt; 1.15&quot;\nspec.add_development_dependency &quot;rake&quot;, &quot;~&gt; 10.0&quot;\nspec.add_development_dependency &quot;rspec&quot;, &quot;~&gt; 3.0&quot;\nspec.add_development_dependency &#39;pg&#39;, &#39;~&gt; 0.19&#39;\nspec.add_development_dependency &#39;pry&#39;, &#39;~&gt; 0.10&#39;\nspec.add_development_dependency &#39;dotenv&#39;, &#39;~&gt; 2.2&#39;\nspec.add_development_dependency &#39;railties&#39;, &#39;~&gt; 5&#39;</code>\n        </deckgo-highlight-code>\n<p>Knowing that we’re going to need to configure the database, we’ll go ahead and create <code class=\"language-text\">config/database.yml</code> and <code class=\"language-text\">.env</code> to allow flexibility in the configuration.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">default: &amp;default\n  adapter: postgresql\n  encoding: unicode\n  pool: 5\n  host: localhost\n  port: 5432\n\nlocal: &amp;local\n  host: &lt;%= ENV[&#39;POSTGRES_HOST&#39;] %&gt;\n  username: &lt;%= ENV[&#39;POSTGRES_USER&#39;] %&gt;\n  password: &lt;%= ENV[&#39;POSTGRES_PASSWORD&#39;] %&gt;\n\ndevelopment:\n  &lt;&lt;: *default\n  &lt;&lt;: *local\n  database: gem_with_database_development\n\ntest:\n  &lt;&lt;: *default\n  &lt;&lt;: *local\n  database: gem_with_database_test</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">POSTGRES_USER=gem_with_database\nPOSTGRES_PASSWORD=password</code>\n        </deckgo-highlight-code>\n<p>Ensure the user the database expects has been created.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ psql postgres --command=&quot;create role gem_with_database with superuser login password &#39;password&#39;&quot;</code>\n        </deckgo-highlight-code>\n<p>Now we can create <code class=\"language-text\">support/active_record_rake_tasks.rb</code> to configure <code class=\"language-text\">ActiveRecord::Tasks::DatabaseTasks</code> and load the rake tasks.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\"># Add the ability to run db:create/migrate/drop etc\nrequire &#39;yaml&#39;\nrequire &#39;erb&#39;\nrequire &#39;dotenv&#39;\nrequire &#39;active_record&#39;\ninclude ActiveRecord::Tasks\n\nroot = File.expand_path(&#39;../..&#39;, __FILE__)\nDatabaseTasks.root = root\nDatabaseTasks.db_dir = File.join(root, &#39;db&#39;)\nDatabaseTasks.migrations_paths = [File.join(root, &#39;db/migrate&#39;)]\n\n# Load the environment variables for the Postgres user\nDotenv.load(&#39;.env&#39;)\nDatabaseTasks.database_configuration = YAML.load(ERB.new(IO.read(File.join(root, &#39;config/database.yml&#39;))).result)\n\n# The SeedLoader is Optional, if you don&#39;t want/need seeds you can skip setting it\nclass SeedLoader\n  def initialize(seed_file)\n    @seed_file = seed_file\n  end\n\n  def load_seed\n    load @seed_file if File.exist?(@seed_file)\n  end\nend\n\nDatabaseTasks.seed_loader = SeederLoader.new(File.join(root, &#39;db/seeds.rb&#39;))\n\nDatabaseTasks.env = ENV[&#39;ENV&#39;] || &#39;development&#39;\n\nActiveRecord::Base.configurations = DatabaseTasks.database_configuration\nActiveRecord::Base.establish_connection(DatabaseTasks.env.to_sym)\n\nload &#39;active_record/railties/databases.rake&#39;</code>\n        </deckgo-highlight-code>\n<p>Let’s walk through what we’ve done and then we’ll try it out! By including <code class=\"language-text\">ActiveRecord::Tasks</code> we are able to start configuring <a href=\"https://github.com/rails/rails/blob/5e4b70461dfd869c7d96b2528e666a9dd8e29183/activerecord/lib/active_record/tasks/database_tasks.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ActiveRecord::Tasks::DatabaseTasks</a>. Looking at the <a href=\"https://github.com/rails/rails/blob/5e4b70461dfd869c7d96b2528e666a9dd8e29183/activerecord/lib/active_record/tasks/database_tasks.rb#L50\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">attr_writer</a> properties in <code class=\"language-text\">DatabaseTasks</code> we can get a feel for the properties we need to set.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">attr_writer :current_config, :db_dir, :migrations_paths, :fixtures_path, :root, :env, :seed_loader</code>\n        </deckgo-highlight-code>\n<p>First, we’ll set <code class=\"language-text\">root</code> to the base directory of the gem, this mimics the effects of <code class=\"language-text\">Rails.root</code>, which coincidentally is exactly what the <a href=\"https://github.com/rails/rails/blob/5e4b70461dfd869c7d96b2528e666a9dd8e29183/activerecord/lib/active_record/tasks/database_tasks.rb#L96-L98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DatabaseTasks#root</a> method calls. Next, we need to set the <code class=\"language-text\">db_dir</code> and we’ll do so by mimicking the structure of a Rails project and having the directory be named <code class=\"language-text\">db</code> and live under the root. Continuing to have our setup look like a Rails project we’ll create the <code class=\"language-text\">db/migrate</code> directory and set it as the <code class=\"language-text\">migrations_paths</code>; note that its plural so we pass in an <code class=\"language-text\">Array</code> and could specify more than one directory.\nWe’ll load the environment variables needed for the <code class=\"language-text\">database_configuration</code> and then make use of <code class=\"language-text\">YAML</code> and <code class=\"language-text\">ERB</code> to interpret the <code class=\"language-text\">database.yml</code> file. The next step is optional, but if we want to be able to use seeds, we have to define a class that responds to <a href=\"https://github.com/rails/rails/blob/5e4b70461dfd869c7d96b2528e666a9dd8e29183/activerecord/lib/active_record/tasks/database_tasks.rb#L281\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">load_seed</a>.\nFollowing the invocation in <code class=\"language-text\">DatabaseTasks</code> we can see the method definition for <a href=\"https://github.com/rails/rails/blob/6a728491b66340345a91264b5983ad81944ab97a/railties/lib/rails/engine.rb#L549-L552\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">load_seed</a>.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">def load_seed\n  seed_file = paths[&quot;db/seeds.rb&quot;].existent.first\n  load(seed_file) if seed_file\nend</code>\n        </deckgo-highlight-code>\n<p>Our <code class=\"language-text\">SeedLoader</code> class will be initialized referencing to a file, which will be <code class=\"language-text\">db/seeds.rb</code> just as in a Rails project. In preparation for running the tests later we’ll default the <code class=\"language-text\">environment</code> to <code class=\"language-text\">development</code> unless otherwise specified. The last three things we need to do are set the <code class=\"language-text\">ActiveRecord::Base.configurations</code> to our configured <code class=\"language-text\">DatabaseTasks.database_configuration</code>, use <code class=\"language-text\">establish_connection</code> to the database using the environment we specified, and then load <a href=\"https://github.com/rails/rails/blob/6a728491b66340345a91264b5983ad81944ab97a/activerecord/lib/active_record/railties/databases.rake\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">active_record/railties/databases.rake</a> to make the Rake tasks available.</p>\n<p>Now we need to load our <code class=\"language-text\">active_record_rake_tasks.rb</code> file in <code class=\"language-text\">Rakefile</code>.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">require &#39;./support/active_record_rake_tasks&#39;\n# Stub the :environment task for tasks like db:migrate &amp; db:seed. Since this is a Gem we&#39;ve explicitly required all\n# dependent files in the needed places and we don&#39;t have to load the entire environment.\ntask :environment</code>\n        </deckgo-highlight-code>\n<p>I stubbed out the <code class=\"language-text\">task :environment</code> because some tasks like <a href=\"https://github.com/rails/rails/blob/6a728491b66340345a91264b5983ad81944ab97a/activerecord/lib/active_record/railties/databases.rake#L59-L62\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">db:migrate</a> explicitly require <code class=\"language-text\">:environment</code> to be defined.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">task migrate: [:environment, :load_config] do\n  ActiveRecord::Tasks::DatabaseTasks.migrate\n  db_namespace[&quot;_dump&quot;].invoke\nend</code>\n        </deckgo-highlight-code>\n<p>Let’s see if it works…</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ rake db:create\nCreated database &#39;gem_with_database_development&#39;\nCreated database &#39;gem_with_database_test&#39;\n\n$ rake db:migrate\n\n$ rake db:drop\nDropped database &#39;gem_with_database_development&#39;\nDropped database &#39;gem_with_database_test&#39;</code>\n        </deckgo-highlight-code>\n<p>I was able to run <code class=\"language-text\">rake db:migrate</code> but we don’t actually have any migrations; unfortunately <code class=\"language-text\">rails generate</code> is not available to us yet! </p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ rails g migration create_author name:string age:integer\nUsage:\n  rails new APP_PATH [options]</code>\n        </deckgo-highlight-code>\n<p>This result is due to the fact that I have the Rails gem globally installed so that I can create new Rails applications in any directory. However, I don’t want to bring the entirety of Rails into the gem so we’re going to have to add this ability ourselves. We’ll create <code class=\"language-text\">exe/gem_rails</code> to mimic the pattern used when creating a gem with a CLI.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">#!/usr/bin/env ruby\n\nrequire &#39;rails&#39;\n\nmodule GemWithDatabase\n  class Engine &lt; Rails::Engine\n    config.generators do |g|\n      g.orm :active_record\n    end\n  end\nend\n\nRails.application = GemWithDatabase::Engine\n\nrequire &#39;rails/commands&#39;</code>\n        </deckgo-highlight-code>\n<p>The code required to get this running is a lot less than I expected and for the sake of brevity I’ll just through what the code is doing (I do however want to write about the process of figuring all this out. I’ll follow this post with that information. <a href=\"https://jer-k.github.io/adding-rails-g-migration-to-a-gem/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Follow up here</a>).</p>\n<p>The <code class=\"language-text\">require rails</code> is not actually requiring all of Rails (as I mentioned I didn’t want to do above) but only the <a href=\"https://github.com/rails/rails/blob/6a728491b66340345a91264b5983ad81944ab97a/railties/lib/rails.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rails module</a> defined in <code class=\"language-text\">Railties</code>. This gives us access to <a href=\"https://github.com/rails/rails/blob/6a728491b66340345a91264b5983ad81944ab97a/railties/lib/rails/engine.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rails::Engine</a>, which we need to create our own. <code class=\"language-text\">Rails::Engine</code> in a subclass of <a href=\"https://github.com/rails/rails/blob/6a728491b66340345a91264b5983ad81944ab97a/railties/lib/rails/railtie.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rails::Railtie</a> which has a <a href=\"https://github.com/rails/rails/blob/6a728491b66340345a91264b5983ad81944ab97a/railties/lib/rails/railtie.rb#L151-L153\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">generators</a> method.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">def generators(&amp;blk)\n  register_block_for(:generators, &amp;blk)\nend</code>\n        </deckgo-highlight-code>\n<p>By registering <code class=\"language-text\">g.orm :active_record</code>, when our engine runs <a href=\"https://github.com/rails/rails/blob/6a728491b66340345a91264b5983ad81944ab97a/railties/lib/rails/engine.rb#L465-L470\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">load_generators</a> </p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">def load_generators(app = self)\n  require &quot;rails/generators&quot;\n  run_generators_blocks(app)\n  Rails::Generators.configure!(app.config.generators)\n  self\nend</code>\n        </deckgo-highlight-code>\n<p>it properly adds <a href=\"https://github.com/rails/rails/blob/6a728491b66340345a91264b5983ad81944ab97a/railties/lib/rails/generators.rb#L153-L154\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">active_record:migration</a> to our accessible generators. Now we can try to generate the migration again. Don’t forget make the file executable <code class=\"language-text\">$ chmod 755 exe/gem_rails</code>.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ exe/gem_rails g migration create_author name:string age:integer\n      invoke  active_record\n      create    db/migrate/20180228040040_create_author.rb</code>\n        </deckgo-highlight-code>\n<p>Success! Let’s look at the migration that was created and then migrate our database.</p>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">class CreateAuthor &lt; ActiveRecord::Migration[5.1]\n  def change\n    create_table :authors do |t|\n      t.string :name\n      t.integer :age\n    end\n  end\nend</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ rake db:migrate\n== 20180228040040 CreateAuthor: migrating =====================================\n-- create_table(:authors)\n   -&gt; 0.0308s\n== 20180228040040 CreateAuthor: migrated (0.0309s) ============================</code>\n        </deckgo-highlight-code>\n<p>Awesome! I’ll wrap up by seeding my database and then query for some data. To accomplish this I’ll create the models, create a migration for books, and the query the data.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ exe/gem_rails g migration create_books title:string pages:integer published:integer author:references\n      invoke  active_record\n      create    db/migrate/20180228040533_create_books.rb\n$ rake db:migrate\n== 20180228040533 CreateBooks: migrating ======================================\n-- create_table(:books)\n   -&gt; 0.0494s\n== 20180228040533 CreateBooks: migrated (0.0495s) =============================\n$ rake db:seed</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"ruby\"  >\n          <code slot=\"code\">$ bin/console\n2.5.0 :001 &gt; require &#39;active_record&#39;\n =&gt; false \n2.5.0 :002 &gt; ActiveRecord::Base.establish_connection(\n2.5.0 :003 &gt;       :adapter =&gt; &#39;postgresql&#39;,\n2.5.0 :004 &gt;       :database =&gt; &#39;gem_with_database_development&#39;\n2.5.0 :005?&gt;   )\n2.5.0 :006 &gt; GemWithDatabase::Author.find_by(name: &#39;J.K. Rowling&#39;)\n =&gt; #&lt;GemWithDatabase::Author id: 2, name: &quot;J.K. Rowling&quot;, age: 50&gt; </code>\n        </deckgo-highlight-code>\n<p>We’ve successfully added all the ActiveRecord Rake tasks to our gem and have been able to create, migrate, seed, and query our database! There is a <a href=\"https://github.com/jer-k/gem_with_database\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repository</a> for I work I did while writing this post. Feel free to try it out and be on the lookout for some follow up posts. I’ll be writing in more detail about the how I figured out what was needed for the <code class=\"language-text\">Rails::Engine</code>(post <a href=\"https://jer-k.github.io/adding-rails-g-migration-to-a-gem/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>) and then I’ll continue working on this project setting up the testing environment locally and then using Docker for CI purposes, along with a few enhancements to the scripts in <code class=\"language-text\">bin/</code>.</p>","fields":{"slug":"add-active-record-rake-tasks-to-gem","tagSlugs":["/tag/ruby/","/tag/rails/","/tag/ruby-gems/","/tag/ruby-on-rails/","/tag/postgres/","/tag/postgresql/","/tag/database/","/tag/active-record/","/tag/rake/"]},"excerpt":"<p>In my previous <a href=\"https://jer-k.github.io/connect-to-database-through-gem/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">post</a> I walked through using a gem to connect to another Rails application’s database, but another use case for connecting a…</p>","frontmatter":{"date":"2018-02-22","description":"Instead of having to create a Rails application and install the gem to connect to the database to test your models, we can create local database for only the gem by adding ActiveRecord's Rake tasks.","tags":["ruby","rails","ruby-gems","ruby-on-rails","postgres","postgresql","database","active-record","rake"],"title":"Adding ActiveRecord Rake Tasks to a Gem"}}},"pageContext":{"slug":"add-active-record-rake-tasks-to-gem"}},"staticQueryHashes":["251939775","2920561799","401334301"]}